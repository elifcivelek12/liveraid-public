steps:
  # 1. Adım: Docker imajını oluştur ve Artifact Registry'ye yükle
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Docker Image'
    args:
      - 'build'
      - '-t'
      - '${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_SERVICE_NAME}:${COMMIT_SHA}'
      - '.'

  # 2. Adım: Oluşturulan imajı Artifact Registry'ye gönder
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Docker Image'
    args:
      - 'push'
      - '${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_SERVICE_NAME}:${COMMIT_SHA}'

  # 3. Adım: Alembic ile veritabanı migration'larını çalıştır

  - name: 'gcr.io/google-appengine/exec-wrapper'
    id: 'Run Alembic Migrations'
    args:
      - '-i'
      - '${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_SERVICE_NAME}:${COMMIT_SHA}'
      - '-s'
      - '${PROJECT_ID}:${_LOCATION}:${_DB_INSTANCE_NAME}'
      - '-e'
      - 'DB_USER=${_DB_USER}'
      - '-e'
      - 'DB_PASS=${_DB_PASS}'
      - '-e'
      - 'DB_NAME=${_DB_NAME}'
      - '--'
      - 'alembic'
      - 'upgrade'
      - 'head'
    secretEnv: ['_DB_USER', '_DB_PASS', '_DB_NAME']

  # 4. Adım: Uygulamayı Cloud Run'a dağıt
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy to Cloud Run'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_liveraid-service}' # Cloud Run servis adın
      - '--image'
      - '${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_SERVICE_NAME}:${COMMIT_SHA}'
      - '--region'
      - '${_LOCATION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated' 
      - '--set-secrets'
      - 'DB_USER=${_DB_USER_SECRET_NAME}:latest,DB_PASS=${_DB_PASS_SECRET_NAME}:latest,DB_NAME=${_DB_NAME_SECRET_NAME}:latest,FLASK_SECRET_KEY=${_FLASK_SECRET_KEY_SECRET_NAME}:latest,GOOGLE_AI_API_KEY=${_GOOGLE_AI_API_KEY_SECRET_NAME}:latest,OPENROUTER_API_KEY=${_OPENROUTER_API_KEY_SECRET_NAME}:latest,CLOUD_SQL_CONNECTION_NAME=${_CLOUD_SQL_CONNECTION_NAME_SECRET_NAME}:latest'
      - '--add-cloudsql-instances'
      - '${_CLOUD_SQL_CONNECTION_NAME}'

# Build sırasında kullanılacak gizli değerlerin Secret Manager'daki yollarını belirtiyoruz.
# Bunlar sadece build (özellikle migration adımı) sırasında kullanılır.
availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/${_DB_USER_SECRET_NAME}/versions/latest
    env: '_DB_USER'
  - versionName: projects/${PROJECT_ID}/secrets/${_DB_PASS_SECRET_NAME}/versions/latest
    env: '_DB_PASS'
  - versionName: projects/${PROJECT_ID}/secrets/${_DB_NAME_SECRET_NAME}/versions/latest
    env: '_DB_NAME'

# Build sırasında komut satırından veya tetikleyici ayarlarından verilebilecek değişkenler.
substitutions:
  _LOCATION: 'europe-west4' # Projenin bölgesi
  _REPOSITORY: 'liveraid-public' # Artifact Registry'deki depo adı
  _SERVICE_NAME: 'liveraid-service' # Cloud Run servis adı
  _DB_INSTANCE_NAME: 'liveraid-postgres' # Cloud SQL instance adı (sadece adı, connection name değil)
  # Secret Manager'daki gizli değerlerin ADLARI
  _DB_USER_SECRET_NAME: 'DB_USER'
  _DB_PASS_SECRET_NAME: 'DB_PASS'
  _DB_NAME_SECRET_NAME: 'DB_NAME'
  _FLASK_SECRET_KEY_SECRET_NAME: 'FLASK_SECRET_KEY'
  _GOOGLE_AI_API_KEY_SECRET_NAME: 'GOOGLE_AI_API_KEY'
  _OPENROUTER_API_KEY_SECRET_NAME: 'OPENROUTER_API_KEY'
  _CLOUD_SQL_CONNECTION_NAME_SECRET_NAME: 'CLOUD_SQL_CONNECTION_NAME' # Bu secret'ı da oluşturman gerekecek

# Dağıtım tamamlandıktan sonra imajların saklanacağı yer
images:
  - '${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_SERVICE_NAME}:${COMMIT_SHA}'